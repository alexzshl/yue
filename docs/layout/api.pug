extends page.pug

//- Anchor link
mixin anchor(id)
  a.anchor(aria-hidden="true" href=`#${id}`)
    <svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>

//- Title with permanent link.
mixin title(level, id, str)
  #{level}(id=id)
    +anchor(id)
    | #{str}

//- Block description of a method or properties.
mixin description(node)
  if node.description
    != markdown(node.description)
  if node.detail
    != markdown(node.detail)

//- Display a type with possible goto link.
mixin type(node)
  if node.args
    span.type
      if lang == 'cpp'
        | std::tuple&lt;
      else if lang == 'js'
        | [
      each arg, i in node.args
        if arg.id
          a.type(href=`${arg.id}.html`) #{arg.name}
        else
          | #{arg.name}
        if i != node.args.length - 1
          | , 
      if lang == 'cpp'
        | &gt;
      else if lang == 'js'
        | ]
  else if node.id
    a.type(href=`${node.id}.html`) #{node.name}
  else
    span.type #{node.name}

//- A list of parameter.
mixin parameters(parameters)
  ul
    each param in parameters
      li
        +parameter(param)

//- Inline description of parameter.
mixin parameter(node)
  code
    +type(node.type)
  |  
  span.code #{node.name}
  if node.description
    |  -
    != ' ' + imarkdown(node.description)
  if node.properties
    ul
      each property in node.properties
        li
          +parameter(property)

//- The title with platform label.
mixin title_with_label(node, str)
  h3(id=node.id)
    +anchor(node.id)
    | #{str}
    if node.platform
      each platform in node.platform
        |  
        span.platform #{platform}

//- Display a method.
mixin method(node)
  +title_with_label(node, node.signature.str)
  +description(node)
  if node.signature.parameters.length > 0
    h4 Parameters
    +parameters(node.signature.parameters)
  if node.signature.returnType
    h4 Return
    code
      +type(node.signature.returnType)

//- Display a link with chosen state.
mixin switch(text, href, chosen, enabled)
  if !enabled
    span.disabled #{text}
  else if chosen
    span.current #{text}
  else
    a(href=href) #{text}

//- Display TOC items.
mixin toc_methods(methods)
  ul
    each node in methods
      li
        +switch(node.signature.shortStr, `${doc.id}.html#${node.id}`, false, true)

mixin toc_properties(properties)
  ul
    each node in properties
      li
        +switch(node.name, `${doc.id}.html#${node.id}`, false, true)

//- Main page starts from here.
block content
  h1 #{doc.name}
  != markdown(doc.description)

  table.code
    if lang == 'cpp'
      tr
        td Header
        td #include "#{doc.header}"
      tr
        td Namespace
        td namespace #{doc.namespace}
      tr
        td Type
        td
          if doc.type == 'refcounted'
            | class (RefCounted)
          else
            | #{doc.type}
      if doc.inherit
        tr
          td Inherits
          td
            +type(doc.inherit)
      if doc.platform
        tr
          td Platforms
          td
            each platform, i in doc.platform
              | #{platform}
              if i != doc.platform.length - 1
                | , 
    else
      if doc.module
        tr
          td Module
          td require("#{doc.module}")
      tr
        td Type
        td #{doc.type}
      if doc.inherit
        tr
          td Inherits
          td
            +type(doc.inherit)
      if doc.platform
        tr
          td Platforms
          td
            each platform, i in doc.platform
              | #{platform}
              if i != doc.platform.length - 1
                | , 

  if doc.detail
    != markdown(doc.detail)

  if doc.enums
    p This type can have following values:
    ul
      each e in doc.enums
        li
          code #{e.name}
          if e.description
            |  - 
            != imarkdown(e.description)

  if doc.global_functions
    +title('h2', 'global-functions', 'Global functions')
    each node in doc.global_functions
      +method(node)

  if doc.constructors
    +title('h2', 'constructors', 'Constructors')
    each node in doc.constructors
      +method(node)

  if doc.class_methods
    +title('h2', 'class-methods', 'Class methods')
    each node in doc.class_methods
      +method(node)

  if doc.class_properties
    +title('h2', 'class-properties', 'Class properties')
    each node in doc.class_properties
      h3(id=node.id)
        +anchor(node.id)
        code
          +type(node.type)
        |  #{node.name}
      +description(node)

  if doc.properties
    +title('h2', 'properties', 'Properties')
    each node in doc.properties
      h3(id=node.id)
        +anchor(node.id)
        code
          +type(node.type)
        |  #{node.name}
        if node.optional
          |  
          span.optional (optional)
        if node.platform
          each platform in node.platform
            |  
            span.platform #{platform}
      +description(node)

  if doc.methods
    +title('h2', 'methods', 'Methods')
    each node in doc.methods
      +method(node)

  if doc.events
    +title('h2', 'events', 'Events')
    each node in doc.events
      +title_with_label(node, node.signature.str)
      +description(node)
      if node.signature.parameters.length > 0
        h4 Parameters
        +parameters(node.signature.parameters)
      h4 Preventable
      if node.signature.returnType
        | Yes.
      else
        | No.

  if doc.delegates
    +title('h2', 'delegates', 'Delegates')
    each node in doc.delegates
      +method(node)

//- The sidebar that lists all types.
block sidebar
  h4 Langauge:
  .lang-switcher
    +switch('C++', `../../cpp/api/${doc.id}.html`, lang == 'cpp',
            !doc.lang || doc.lang.includes('cpp'))
    |  | 
    +switch('Lua', `../../lua/api/${doc.id}.html`, lang == 'lua',
            !doc.lang || doc.lang.includes('lua'))
    |  | 
    +switch('JavaScript', `../../js/api/${doc.id}.html`, lang == 'js',
            !doc.lang || doc.lang.includes('js'))

  h4 Version:
  span.current #{version}

  h4 Formats:
  a(href=`${doc.id}.json`) JSON

  if doc.global_functions
    h4 Global functions:
    +toc_methods(doc.global_functions)

  if doc.constructors
    h4 Constructors:
    +toc_methods(doc.constructors)

  if doc.class_methods
    h4 Class methods:
    +toc_methods(doc.class_methods)

  if doc.class_properties
    h4 Class properties:
    +toc_properties(doc.class_properties)

  if doc.properties
    h4 Properties:
    +toc_properties(doc.properties)

  if doc.methods
    h4 Methods:
    +toc_methods(doc.methods)

  if doc.events
    h4 Events:
    +toc_methods(doc.events)

  if doc.delegates
    h4 Delegates:
    +toc_methods(doc.delegates)

  h4 Components:
  ul
    each type in types
      if type.component == 'gui'
        li
          +switch(type.name, `${type.id}.html`, doc.name == type.name, true)
