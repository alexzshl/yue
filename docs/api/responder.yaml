name: Responder
component: gui
header: nativeui/responder.h
type: refcounted
namespace: nu
description: Base class of Window and View for event processing.

methods:
  - signature: const char* GetClassName() const
    lang: ['cpp']
    description: Return the receiving responder's class name.
    detail: |
      A class name is a string which uniquely identifies the class. It is
      intended to be used as a way to find out during run time if a responder
      can be safely casted to a specific subclass.

  - signature: void SetCapture()
    description: Set mouse capture to the responder.

  - signature: void ReleaseCapture()
    description: Release mouse capture if the responder has mouse capture.

  - signature: bool HasCapture() const
    description: Return whether the responder has mouse capture.

  - signature: NativeResponder GetNative() const
    lang: ['cpp']
    description: Return the native type wrapped by the responder.

  - signature: Buffer GetNative() const
    lang: ['js']
    platform: ['Linux', 'macOS']
    description: |
      Return a Node.js `Buffer` containing the pointer of underlying native
      widget wrapped by the responder.
    detail: &getnative |
      On Linux the C++ type of the pointer is `GtkWidget*`, and on macOS it is
      `NSResponder*`. The actual subclass type depends on which type this
      responder is, for example for `Window` you can expect the native type to
      be `GtkWindow*` on Linux and `NSWindow*` on macOS, and for `View` it would
      be `GtkWidget*` on Linux and `NSView*` on macOS.

      However for subclasses of `View`, the native type is not specified, you
      may find out the information by looking into the source code, but the type
      might be changed in future updates. For example, the native type of
      `TextEdit` is currently a `GtkScrolledWindow*` with a `GtkTextView*` in
      it, but we may want to replace it with a custom widget when adding more
      features in future.

  - signature: userdata GetNative() const
    lang: ['lua']
    platform: ['Linux', 'macOS']
    description: |
      Return a light userdata containing the pointer of underlying native
      widget wrapped by the responder.
    detail: *getnative

events:
  - signature: bool on_mouse_down(Responder* self, const MouseEvent& event)
    description: Emitted when pressing mouse buttons.

  - signature: bool on_mouse_up(Responder* self, const MouseEvent& event)
    description: Emitted when releasing mouse buttons.

  - signature: void on_mouse_move(Responder* self, const MouseEvent& event)
    description: Emitted when user moves mouse in the responder.

  - signature: void on_mouse_enter(Responder* self, const MouseEvent& event)
    description: Emitted when mouse enters the responder.

  - signature: void on_mouse_leave(Responder* self, const MouseEvent& event)
    description: Emitted when mouse leaves the responder.

  - signature: bool on_key_down(Responder* self, const KeyEvent& event)
    description: Emitted when pressing keyboard.

  - signature: bool on_key_up(Responder* self, const KeyEvent& event)
    description: Emitted when releasing keyboard.

  - signature: void on_capture_lost(Responder* self)
    description: Emitted when the mouse capture on responder has been released.
